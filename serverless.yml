service: pgdump-aws-lambda

# Pinning the version to currently used version when developing this.
frameworkVersion: "3"

plugins:
  - serverless-plugin-include-dependencies
  - serverless-plugin-common-excludes
  - serverless-pseudo-parameters

useDotenv: true

provider:
  name: aws
  runtime: nodejs14.x
  memorySize: 256
  timeout: 30
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  environment:
    NODE_ENV:
      ${self:custom.nodeEnv.${opt:stage, self:provider.stage}, 'development'}
    STAGE: ${opt:stage, self:provider.stage}
    S3_REGION: ${env:S3_REGION, self:provider.region}
    PGDATABASE: ${env:PGDATABASE, ""}
    PGUSER: ${env:PGUSER, ""}
    PGPASSWORD: ${env:PGPASSWORD, ""}
    PGHOST: ${env:PGHOST, ""}
    S3_BUCKET: ${env:S3_BUCKET, ""}
    S3_ROOT: ${env:S3_ROOT, ""}
    ENCRYPT_KEY: ${env:ENCRYPT_KEY, ""}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:PutObject
      Resource: arn:aws:s3:::${env:S3_BUCKET, ""}/*
  stackTags:
    Project: "Usher"
  tags:
    Project: "Usher"

functions:
  cron:
    handler: index.handler
    events:
      - schedule: rate(1 day)

custom:
  nodeEnv:
    dev: "development"
    prod: "production"
  serverless-offline:
    noPrependStageInUrl: true
    httpPort: 3005
